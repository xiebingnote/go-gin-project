## JVM configuration

################################################################
## IMPORTANT: JVM heap size
################################################################
##
## You should always set the min and max JVM heap
## size to the same value. For example, to set
## the heap to 4 GB, set:
##
## -Xms4g
## -Xmx4g
##
## See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html
## for more information
##
################################################################

# Xms represents the initial size of total heap space
# Xmx represents the maximum size of total heap space

-Xms1g
-Xmx1g

################################################################
## Expert settings
################################################################
##
## All settings below this section are considered
## expert settings. Don't tamper with them unless
## you understand what you are doing
##
################################################################

## GC configuration
8-13:-XX:+UseConcMarkSweepGC
8-13:-XX:CMSInitiatingOccupancyFraction=75
8-13:-XX:+UseCMSInitiatingOccupancyOnly

## G1GC Configuration
# NOTE: G1 GC is only supported on JDK version 10 or later
# to use G1GC, uncomment the next two lines and comment the CMS settings above.
14-:-XX:+UseG1GC
14-:-XX:G1HeapRegionSize=4m

## JVM temporary directory
-Djava.io.tmpdir=${ES_TMPDIR}

## heap dumps

# generate a heap dump when an allocation from the Java heap fails
# heap dumps are created in the working directory of the JVM
-XX:+HeapDumpOnOutOfMemoryError

# specify an alternative path for heap dumps; ensure the directory exists and
# has sufficient space
-XX:HeapDumpPath=data

# specify an alternative path for JVM fatal error logs
-XX:ErrorFile=logs/hs_err_pid%p.log

## JDK 8 GC logging
8:-XX:+PrintGCDetails
8:-XX:+PrintGCDateStamps
8:-XX:+PrintTenuringDistribution
8:-XX:+PrintGCApplicationStoppedTime
8:-Xloggc:logs/gc.log
8:-XX:+UseGCLogFileRotation
8:-XX:NumberOfGCLogFiles=32
8:-XX:GCLogFileSize=64m

# JDK 9+ GC logging
9-:-Xlog:gc*,gc+age=trace,safepoint:logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m

## JDK 8 GC logging for Docker
8:-XX:+PrintGCDetails
8:-XX:+PrintGCTimeStamps
8:-XX:+PrintGCDateStamps
8:-XX:+PrintClassHistogram
8:-XX:+PrintTenuringDistribution
8:-XX:+PrintGCApplicationStoppedTime
8:-Xloggc:/dev/stdout
8:-XX:+UseGCLogFileRotation
8:-XX:NumberOfGCLogFiles=1
8:-XX:GCLogFileSize=1G

## JDK 9+ GC logging for Docker
9-:-Xlog:gc*,gc+age=trace,safepoint:file=/dev/stdout:time,pid,tags

# JDK 11 and later
11-:-XX:+UnlockExperimentalVMOptions
11-:-XX:+UseEpsilonGC

## Locale
# Set the locale language
#-Duser.language=en

# Set the locale country
#-Duser.country=US

# Set the locale variant, if any
#-Duser.variant=

## basic

# disable calls to System#gc
-XX:+DisableExplicitGC

# pre-touch memory pages used by the JVM during initialization
-XX:+AlwaysPreTouch

## flags to configure Netty
-Dio.netty.noUnsafe=true
-Dio.netty.noKeySetOptimization=true
-Dio.netty.recycler.maxCapacityPerThread=0
-Dio.netty.allocator.numDirectArenas=0

## log4j 2
-Dlog4j.shutdownHookEnabled=false
-Dlog4j2.disable.jmx=true

-Djava.locale.providers=SPI,COMPAT

## heap size check
-XX:MaxDirectMemorySize=536870912

## G1GC Configuration for large heaps
# NOTE: G1 GC is only supported on JDK version 10 or later
# to use G1GC for large heaps, uncomment the next line
#14-:-XX:G1HeapRegionSize=32m

## Temporary workaround for C2 bug with JDK 11.0.4
11:-XX:UseAVX=2

## Temporary workaround for C2 bug with JDK 11.0.11
11.0.11:-XX:UseAVX=2

## Temporary workaround for JDK 14 and later
14-:-Djdk.util.jar.enableMultiRelease=force
